#!/usr/bin/env python
import os
import sys
import django
import unicodedata

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'buscador.settings')
django.setup()

from core.search_manager import procesar_keywords

def test_keyword_filtering():
    """Test del filtrado de keywords que usa el scraper"""
    print("üß™ [TEST KEYWORDS] Probando filtrado de palabras clave...\n")
    
    # Keywords de prueba
    test_keywords = ["luminoso", "parrillero", "rambla"]
    
    # Texto de prueba (similar al de una propiedad real)
    titulo_real = "Cordon Pre Venta Apartamento 1 Dormitorio Amenities"
    descripcion_real = """Edificio MET TECH, MUY BUENA UBICACION, EN EL CORAZON DEL BARRIO CORDON SOBRE LA CALLE CONSTITUYENTE, CERCA DE UNIVERSIDADES Y TODOS LOS SERVICIOS / Entrega de unidades:
DICIEMBRE 2025- Edificio con propuestas arquitect√≥nicas innovadoras, finas terminaciones y Amenities Premium! Las unidades se destacan por su luminosidad, sus amplios ventanales, vistas despejadas Living-comedor con salida a terraza al frente Cocina integrada, dispone de buena capacidad de muebles a√©reos y bajo mesada- Se entrega con splits de aire acondicionado ya instalados en Living y Dormitorio  BENEFICIOS IMPOSITIVOS por construirse bajo la Ley de Vivienda Promovida AL MOMENTO DE LA COMPRA: * Exoneraci√≥n del ITP (2% sobre el valor catastral) * Exoneraci√≥n del IVA del precio de compra POR 10 A√ëOS: * Exoneraci√≥n del Impuesto a la Renta de los Alquileres * Exoneraci√≥n del Impuesto al Patrimonio  OPORTUNIDADES DE PREVENTA: * Monoambientes desde USD99.213- * 1 Dormitorio desde USD134.120- * 2 Dormitorios desde USD172.838- GARAGES desde USD19.870- BAULERAS: USD4.415-  AMENITIES PREMIUM: * Barbacoa en azotea con Parrillero y √°rea de Solarium con vistas panor√°micas a la Rambla * Piscina abierta e nivel de la azotea * Gimnasio * Cowork * Laundry * Bike parking Por consultas y coordinaci√≥n de visitas favor enviar mensaje v√≠a WhatsApp o llamar al celular de contacto"""
    
    caracteristicas_real = """Superficie total: 49 m¬≤
√Årea privada: 41 m¬≤
Superficie de balc√≥n: 8 m¬≤
Ambientes: 2
Dormitorios: 1
Ba√±os: 1
Cocheras: 0
Bodegas: 0
Cantidad de pisos: 1
Apartamentos por piso: 2
N√∫mero de piso de la unidad: 2
Tipo de departamento: Departamento
Disposici√≥n: Frente
Orientaci√≥n: Sur
Antig√ºedad: 0 a√±os
Agua corriente: S√≠
Aire acondicionado: S√≠
Calefacci√≥n: S√≠
Gimnasio: S√≠
Ascensor: S√≠
Circuito de c√°maras de seguridad: S√≠
Placards: No
Ba√±o social: No
Terraza: S√≠
Comedor: No
Estudio: No
Living: S√≠
Patio: No
Dormitorio en suite: No
Jard√≠n: No
Cocina: S√≠
Dormitorio de servicio: No
Con lavadero: S√≠
Parrillero: S√≠
Piscina: S√≠
Admite mascotas: S√≠
Dep√≥sitos: 0"""
    
    # Probar el procesamiento de keywords
    print("üìù [TEST] Keywords originales:", test_keywords)
    keywords_procesadas = procesar_keywords(' '.join(test_keywords))
    print("üìù [TEST] Keywords procesadas:", keywords_procesadas)
    
    # Simular el texto total que usa el scraper
    texto_total = f"{titulo_real.lower()} {descripcion_real.lower()} {caracteristicas_real.lower()}"
    print(f"\nüìÑ [TEST] Texto total tiene {len(texto_total)} caracteres")
    
    # Funci√≥n de normalizaci√≥n (copiada del scraper)
    def normalizar(texto):
        return unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII').lower()
    
    # Probar normalizaci√≥n
    keywords_norm = [normalizar(kw) for kw in keywords_procesadas]
    texto_total_norm = normalizar(texto_total)
    
    print(f"üìù [TEST] Keywords normalizadas: {keywords_norm}")
    print(f"üìÑ [TEST] Texto normalizado tiene {len(texto_total_norm)} caracteres")
    
    # Verificar cada keyword individualmente
    print(f"\nüîç [TEST] Verificando cada keyword:")
    for i, kw in enumerate(keywords_norm):
        encontrada = kw in texto_total_norm
        print(f"  - '{kw}': {'‚úÖ ENCONTRADA' if encontrada else '‚ùå NO ENCONTRADA'}")
        
        if not encontrada:
            # Buscar palabras similares
            palabras_similares = [palabra for palabra in texto_total_norm.split() if kw in palabra or palabra in kw]
            if palabras_similares:
                print(f"    Palabras similares encontradas: {palabras_similares[:5]}")
    
    # Verificar si todas las keywords est√°n presentes (l√≥gica del scraper)
    cumple = all(kw in texto_total_norm for kw in keywords_norm)
    print(f"\nüéØ [TEST] ¬øCumple con todas las keywords? {'‚úÖ S√ç' if cumple else '‚ùå NO'}")
    
    return cumple

def test_simple_keywords():
    """Test con keywords m√°s simples"""
    print(f"\nüß™ [TEST SIMPLE] Probando con keywords m√°s b√°sicas...\n")
    
    # Keywords que deber√≠an encontrarse f√°cilmente
    test_keywords = ["dormitorio", "apartamento"]
    titulo_simple = "Apartamento 1 dormitorio en venta"
    
    keywords_procesadas = procesar_keywords(' '.join(test_keywords))
    print("üìù [TEST] Keywords procesadas:", keywords_procesadas)
    
    def normalizar(texto):
        return unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII').lower()
    
    keywords_norm = [normalizar(kw) for kw in keywords_procesadas]
    texto_norm = normalizar(titulo_simple)
    
    print(f"üìù [TEST] Keywords normalizadas: {keywords_norm}")
    print(f"üìÑ [TEST] Texto: '{texto_norm}'")
    
    for kw in keywords_norm:
        encontrada = kw in texto_norm
        print(f"  - '{kw}': {'‚úÖ ENCONTRADA' if encontrada else '‚ùå NO ENCONTRADA'}")
    
    cumple = all(kw in texto_norm for kw in keywords_norm)
    print(f"\nüéØ [TEST] ¬øCumple? {'‚úÖ S√ç' if cumple else '‚ùå NO'}")
    
    return cumple

if __name__ == '__main__':
    print("üöÄ [TEST KEYWORDS] Iniciando pruebas de filtrado de keywords...\n")
    
    # Test 1: Keywords complejas
    test1_ok = test_keyword_filtering()
    
    # Test 2: Keywords simples
    test2_ok = test_simple_keywords()
    
    print(f"\nüìä [RESUMEN]")
    print(f"Test keywords complejas: {'‚úÖ OK' if test1_ok else '‚ùå FALLO'}")
    print(f"Test keywords simples: {'‚úÖ OK' if test2_ok else '‚ùå FALLO'}")
    
    if not test1_ok and not test2_ok:
        print("‚ö†Ô∏è [CONCLUSI√ìN] El filtrado de keywords es muy estricto y podr√≠a estar impidiendo que se guarden propiedades")
    elif not test1_ok:
        print("‚ö†Ô∏è [CONCLUSI√ìN] El filtrado funciona para keywords simples pero falla con complejas")
    else:
        print("‚úÖ [CONCLUSI√ìN] El filtrado de keywords funciona correctamente")
