#!/usr/bin/env python
"""
Test para verificar que las actualizaciones de b√∫squeda 
buscan SIEMPRE en todas las plataformas disponibles,
independientemente de los resultados previos.
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'buscador.settings')
django.setup()

from core.models import Busqueda, ResultadoBusqueda, Usuario
from core.search_manager import actualizar_busqueda

def test_actualizacion_multiplataforma():
    """
    Verifica que actualizar_busqueda busque en MercadoLibre e InfoCasas
    sin importar qu√© plataformas ten√≠an resultados previamente.
    """
    
    print("=== Test: Actualizaci√≥n Multi-plataforma ===\n")
    
    # Buscar b√∫squedas existentes para probar
    busquedas = Busqueda.objects.filter(guardado=True)
    
    if not busquedas.exists():
        print("‚ùå No hay b√∫squedas guardadas para probar")
        return False
    
    busqueda = busquedas.first()
    print(f"üìã Probando con b√∫squeda: {busqueda.id}")
    print(f"   Filtros: {busqueda.filtros}")
    
    # Ver resultados actuales
    resultados_actuales = ResultadoBusqueda.objects.filter(busqueda=busqueda)
    plataformas_actuales = {r.propiedad.plataforma.nombre for r in resultados_actuales.select_related('propiedad__plataforma')}
    
    print(f"   Resultados actuales: {resultados_actuales.count()}")
    print(f"   Plataformas actuales: {plataformas_actuales}")
    
    # Crear callback para capturar mensajes de progreso
    mensajes_progreso = []
    def capture_progress(mensaje):
        mensajes_progreso.append(mensaje)
        print(f"   [PROGRESO] {mensaje}")
    
    print(f"\nüîÑ Iniciando actualizaci√≥n...")
    
    try:
        # Este es el test principal: actualizar_busqueda deber√≠a buscar en AMBAS plataformas
        resultado = actualizar_busqueda(str(busqueda.id), capture_progress)
        
        print(f"\nüìä Resultado:")
        print(f"   √âxito: {resultado['success']}")
        
        if resultado['success']:
            print(f"   Estad√≠sticas: {resultado['estadisticas']}")
        else:
            print(f"   Error: {resultado['error']}")
        
        # Verificar que se intent√≥ buscar en ambas plataformas
        busco_mercadolibre = any('MercadoLibre' in msg for msg in mensajes_progreso)
        busco_infocasas = any('InfoCasas' in msg for msg in mensajes_progreso)
        
        print(f"\n‚úÖ Verificaci√≥n de plataformas:")
        print(f"   Busc√≥ en MercadoLibre: {'‚úì' if busco_mercadolibre else '‚úó'}")
        print(f"   Busc√≥ en InfoCasas: {'‚úì' if busco_infocasas else '‚úó'}")
        
        if busco_mercadolibre and busco_infocasas:
            print(f"\nüéâ ¬°√âXITO! La actualizaci√≥n busca en TODAS las plataformas")
            print(f"   Sin importar qu√© plataformas ten√≠an resultados anteriormente.")
            return True
        else:
            print(f"\n‚ùå FALLA: No se busc√≥ en todas las plataformas")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_independencia_plataformas():
    """
    Verifica que la l√≥gica sea independiente de resultados previos
    """
    print(f"\n=== Test: Independencia de Plataformas ===\n")
    
    from core.search_manager import actualizar_busqueda
    import inspect
    
    # Analizar el c√≥digo fuente
    source = inspect.getsource(actualizar_busqueda)
    
    # Verificaciones
    tests = [
        ('plataformas_a_buscar' not in source, "No depende de plataformas_a_buscar"),
        ('SIEMPRE buscar' in source, "Tiene l√≥gica expl√≠cita para buscar siempre"),
        ('TODAS las plataformas' in source, "Menciona expl√≠citamente todas las plataformas"),
        ('if \'MercadoLibre\' in plataformas_' not in source, "MercadoLibre no es condicional"),
        ('if \'InfoCasas\' in plataformas_' not in source, "InfoCasas no es condicional")
    ]
    
    todos_ok = True
    for test_result, descripcion in tests:
        status = "‚úì" if test_result else "‚úó"
        print(f"   {status} {descripcion}")
        if not test_result:
            todos_ok = False
    
    return todos_ok

if __name__ == '__main__':
    print("üöÄ Iniciando tests de actualizaci√≥n multi-plataforma...\n")
    
    test1 = test_independencia_plataformas()
    test2 = test_actualizacion_multiplataforma()
    
    print(f"\n" + "="*60)
    print(f"üìã RESUMEN:")
    print(f"   Independencia de c√≥digo: {'‚úì PASS' if test1 else '‚úó FAIL'}")
    print(f"   Funcionalidad completa: {'‚úì PASS' if test2 else '‚úó FAIL'}")
    
    if test1 and test2:
        print(f"\nüéâ ¬°TODOS LOS TESTS PASARON!")
        print(f"   Las actualizaciones de b√∫squeda ahora buscan SIEMPRE")
        print(f"   en MercadoLibre e InfoCasas, sin importar resultados previos.")
    else:
        print(f"\n‚ùå Algunos tests fallaron. Revisar implementaci√≥n.")
    
    print(f"="*60)