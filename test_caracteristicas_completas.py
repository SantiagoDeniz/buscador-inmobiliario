#!/usr/bin/env python3
"""
Script para probar la extracci√≥n y guardado completo de caracter√≠sticas de MercadoLibre.
"""

import os
import sys
import django

# Configurar Django
sys.path.append(os.path.abspath('.'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'buscador.settings')
django.setup()

from core.scraper.extractors import scrape_detalle_con_requests
import json

def test_caracteristicas_extraction():
    """Prueba la extracci√≥n de caracter√≠sticas de una URL de MercadoLibre"""
    
    # URL de ejemplo (cambiar por una URL real de MercadoLibre)
    test_url = "https://inmueble.mercadolibre.com.uy/MLU-497000000-apartamento-1-dormitorio-parque-rodo-alquiler"
    
    print("üîç Probando extracci√≥n de caracter√≠sticas...")
    print(f"URL: {test_url}")
    print("=" * 60)
    
    # Extraer datos
    datos = scrape_detalle_con_requests(test_url)
    
    if not datos:
        print("‚ùå No se pudieron extraer datos de la URL")
        return
    
    print("‚úÖ Datos extra√≠dos exitosamente")
    print("\nüìä CARACTER√çSTICAS EXTRA√çDAS:")
    print("=" * 40)
    
    # Mostrar caracter√≠sticas completas
    if 'caracteristicas_dict' in datos:
        carac_dict = datos['caracteristicas_dict']
        print(f"üìã Diccionario de caracter√≠sticas ({len(carac_dict)} elementos):")
        for key, value in carac_dict.items():
            print(f"  ‚Ä¢ {key.capitalize()}: {value}")
    
    print(f"\nüìù Texto de caracter√≠sticas:")
    print(f"  {datos.get('caracteristicas_texto', 'No disponible')}")
    
    # Mostrar otros datos importantes
    print(f"\nüè† DATOS PRINCIPALES:")
    print(f"  ‚Ä¢ T√≠tulo: {datos.get('titulo', 'N/A')}")
    print(f"  ‚Ä¢ Tipo: {datos.get('tipo_inmueble', 'N/A')}")
    print(f"  ‚Ä¢ Precio: {datos.get('precio_moneda', '')} {datos.get('precio_valor', 'N/A')}")
    print(f"  ‚Ä¢ Dormitorios: {datos.get('dormitorios_min', 'N/A')}-{datos.get('dormitorios_max', 'N/A')}")
    print(f"  ‚Ä¢ Ba√±os: {datos.get('banos_min', 'N/A')}-{datos.get('banos_max', 'N/A')}")
    print(f"  ‚Ä¢ Superficie total: {datos.get('superficie_total_min', 'N/A')}-{datos.get('superficie_total_max', 'N/A')}")
    print(f"  ‚Ä¢ Amoblado: {datos.get('es_amoblado', False)}")
    print(f"  ‚Ä¢ Mascotas: {datos.get('admite_mascotas', False)}")
    print(f"  ‚Ä¢ Piscina: {datos.get('tiene_piscina', False)}")
    
    # Mostrar estructura completa de datos
    print(f"\nüîß ESTRUCTURA COMPLETA (JSON):")
    print("=" * 40)
    print(json.dumps(datos, indent=2, ensure_ascii=False))
    
    return datos

def test_metadata_storage():
    """Prueba c√≥mo se almacenar√≠an las caracter√≠sticas en metadata"""
    
    # Simular datos extra√≠dos
    datos_simulados = {
        'titulo': 'Apartamento 2 dormitorios en Pocitos',
        'caracteristicas_dict': {
            'dormitorios': '2',
            'ba√±os': '1',
            'superficie total': '60 m¬≤',
            'tipo de inmueble': 'Apartamento',
            'amoblado': 'No',
            'mascotas': 'S√≠',
            'antig√ºedad': '5 a√±os'
        },
        'caracteristicas_texto': 'Dormitorios: 2\nBa√±os: 1\nSuperficie total: 60 m¬≤'
    }
    
    print("\nüóÑÔ∏è PRUEBA DE ALMACENAMIENTO EN METADATA:")
    print("=" * 50)
    
    # Simular metadata como se guardar√≠a ahora
    metadata_completo = {
        'caracteristicas_dict': datos_simulados.get('caracteristicas_dict', {}),
        'caracteristicas_texto': datos_simulados.get('caracteristicas_texto', ''),
        'tipo_inmueble': datos_simulados.get('tipo_inmueble', ''),
    }
    
    print("üì¶ Metadata que se guardar√≠a:")
    print(json.dumps(metadata_completo, indent=2, ensure_ascii=False))
    
    print(f"\n‚úÖ Total de caracter√≠sticas guardadas: {len(metadata_completo['caracteristicas_dict'])}")
    
    return metadata_completo

if __name__ == "__main__":
    print("üöÄ PROBANDO SISTEMA DE CARACTER√çSTICAS MEJORADO")
    print("=" * 60)
    
    # Probar extracci√≥n (comentado para evitar llamadas reales)
    # test_caracteristicas_extraction()
    
    # Probar estructura de almacenamiento
    test_metadata_storage()
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print("\nAhora las caracter√≠sticas de MercadoLibre se guardan completamente en:")
    print("  ‚Ä¢ metadata['caracteristicas_dict'] - Diccionario completo clave-valor")
    print("  ‚Ä¢ metadata['caracteristicas_texto'] - Texto formateado legible")
    print("  ‚Ä¢ metadata[...] - Datos estructurados individuales")