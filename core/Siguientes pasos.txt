Completados:
  🎯✅ COMPLETADO - Armar la base de datos.

  🎯 Próximos Pasos Recomendados:
  ✅ COMPLETADO - Tests: Crear tests para nuevas funcionalidades (17 tests pasando)
  ✅ COMPLETADO - Documentación: Actualizar documentación técnica (DOCUMENTACION_TECNICA.md)
  ✅ COMPLETADO - Probar Funcionalidad WebSocket: Redis/Channels funcionando correctamente
  ✅ COMPLETADO - Exportación CSV + Auditoría: Endpoints /csv/export/all/, /csv/table/<tabla>/ y /csv/audit/latest/, manifiesto _manifest.json/CSV y poda de snapshots
  ✅ Migrar a PostgreSQL: Para entorno de producción
  ✅ COMPLETADO - MIGRACIÓN A BASE DE DATOS RELACIONAL:
    ✅ 8 modelos Django implementados
    ✅ Sistema de sinónimos funcional
    ✅ Compatibilidad con WebSocket/consumers.py
    ✅ Admin panel configurado
    ✅ 17 tests unitarios pasando
    ✅ Redis/Channels Layer funcionando
    ✅ Migraciones aplicadas
    ✅ Datos de ejemplo cargados
    ✅ Performance optimizada (<1 segundo consultas)
  ✅ Se arregló un bug del frontend que impedía mostrar la lista de publicaciones al finalizar una búsqueda (variable JS fuera de scope).


  ✅ ARREGLADO - Guardado de publicaciones mejorado con:
    ✅ Lógica de keywords más flexible (70% coincidencia)
    ✅ Stemming básico para español
    ✅ Mejor manejo de errores
    ✅ Logs más detallados para debug
  ✅ Que la lista de los resultados se guarden en las búsquedas guardadas


🔄 SIGUIENTES PRIORIDADES:

  Funcionalidades a agregar / reparar / revisar:
    - (1h) [Revisar] eliminado de búsquedas desde interfaz. No quedan guardadas actualmente.
    - (1,30') Las propiedades que encuentran (por ahora solo guarda coincidentes. Debería guardar las no coincidentes con 'coincide' valor False)
    - (40') Guardar características en la tabla de propiedades.
    - (1h) [Revisar] Búsquedas con keywords y sinónimos 
    - (2h) Se sigue mostrando los resultados encontrados de forma distinta a las búsquedas guardadas. 
  Otras acciones:
    - (4h) Agregar búsqueda de InfoCasas
    - (2,5h) Cron jobs para automatización 
    - Que la IA genere sinónimos para la palabra clave
    - Sin subtítulos en resultados encontrados cuando se busca y guarda por primera vez. (30 mins)
    - Botón de reiniciar búsqueda en búsquedas guardadas (2 hs)
    - Optimizar Consultas: Añadir índices y select_related (2 hs)
    - Dashboard de métricas y estadísticas (3 hs)
  ⚙️ Otras acciones (opcionales):
    - Documentar integración con Google Sheets (en README) y ejemplo de importación
    - Ajustar retención de snapshots según política (keep=N) si se desea histórico


📝 Arreglitos del pasado futuro:
  Se implementó “Buscar nuevamente” para relanzar búsquedas guardadas: endpoint backend, botón en UI y refresco parcial del HTML.
  Se corrigió un error de tipos en el scraper (“expected str instance, dict found”) normalizando keywords a strings antes de usarlas.
  Se agregaron campos en BD para persistir “Última revisión” en Busqueda y el historial por resultado (last_seen_at, seen_count) con migraciones aplicadas.
  Se ajustó search_manager.get_search para preferir la “Última revisión” persistida.
  Se refactorizó search_manager.save_results:
  Manejo de timezone (timezone.now()).
  Actualización de seen_count/last_seen_at sin sobreescribir datos buenos.
  Se mejoró load_results para devolver el título correcto (prioriza Propiedad.titulo; fallback a metadata si falta).
  Se indicó claramente dónde se guardan y de dónde se leen/muestran los resultados:
  Guardado/lectura: search_manager.py (save_results, load_results).
  Render UI: search_detail_partial.html y JS en home.html.


🚀 Cosas a tener en cuenta para deplegar el proyecto para producción:
  Cookies mias: Solucionar de otra forma (¿capaz utilizando concurrencia y proxy se soluciona?)

🎉 ESTADO ACTUAL: Sistema completamente migrado a base de datos relacional y funcionando (desactualizado)
📊 TESTS: 17/17 tests pasando (antiguo)
⚡ PERFORMANCE: Optimizada para producción
📚 DOCUMENTACIÓN: falta actualizar y documentar última actualización acá.


